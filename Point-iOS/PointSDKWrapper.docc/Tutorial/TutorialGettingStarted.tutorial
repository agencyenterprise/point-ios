@Tutorial(time: 20) {
    @Intro(title: "Getting Started") {
        Learn the first steps to start using Point SDK.
    }
    
    @Section(title: "Setting up your project") {
        @ContentAndMedia {
            Learn how to add PointSDK to your project using SPM, how to enable HealthKit capabilities, and how to edit your plist file to request user authorization.
        }
        
        @Steps {
            @Step {
                Create a new Project.

                In this tutorial we will use the default files generated by Xcode when you create a new project with Storyboard Interface.
                
                @Image(source: "CreateProject", alt: "Image that shows a initial project created in xcode.")
            }

            @Step {
                In an existing project go to Project -> Package Dependencies and click in the "+" to add a new dependency.
                
                @Image(source: "AddPackage", alt: "Image showing a emprty Package Dependecies screen in XCode project.")
            }
            
            @Step {
                Search for "point-ios" or provide the [github link to the SDK repository](https://github.com/agencyenterprise/point-ios). Select "point-ios". Check if the version is the latest and click "Add Package". Wait for the package to be installed.

                @Image(source: "AddPoint", alt: "Image that shows point-ios package selected in the Package Dependencies selection screen. The selected Dependency Rule is Up to Next Major Version.")
            }

            @Step {
                In the project navigation, select the Target you wish to use the SDK and go to Signing & Capabilities. Click in the "+", search and select HealthKit.
                
                This enables us to collect user's Health data if the user gives us permission to do so. We will explain how to get user authorization later.

                @Image(source: "AddHealthKit", alt: "Image that shows HealthKit capability being added to the main project's target.")
            }

            @Step {
                Still in the Target screen, switch to the "Info" tab. Click in the "+" to add a new key and type "Privacy - Health Share Usage Description". In the value field, type a short message explaining why your app requests user's health data.
                
                Later, when your app requests user's authorization to access Health data, an iOS prompt will be displayed to the user asking which data types to allow us to read. The message you type here will be displayed to the user as an explanation.

                @Image(source: "AddPlist", alt: "Image showing the Custom iOS Target Properties table. The key 'Privacy - Health Share Usage Description' was added with the String value 'Type a message to explain why you need Health Data'.")
            }
        }
    }

    @Section(title: "Start using the SDK") {
        @ContentAndMedia {
            Learn how to setup the SDK, how to request user authorizations and to authenticate your user.
        }
        
        @Steps {
            @Step {
                First, import PointSDK in your AppDelegate. Lets first set the SDK to verbose mode to get debugging logs.
                
                @Code(name: "AppDelegate.swift", file: "TutorialCodeAppDelegate1.swift")
            }
            
            @Step {
                Now, in `application(didFinishLaunchingWithOptions:)` call the set up function of the SDK. In `queryTypes` use all types and in `environment` use `.development`.
                
                Here you must provide your Client ID and Client Secret.
                
                @Code(name: "AppDelegate.swift", file: "TutorialCodeAppDelegate2.swift")
            }

            @Step {
                The next step is setting up Point's integration with Apple's HealthKit.

                Here you must provide what Health data types you wish to collect from Apple's Health. This information will be used later by the SDK to request user's authorizations and to know which data is to be collected. We recommend using all data types available.
                
                @Code(name: "AppDelegate.swift", file: "TutorialCodeAppDelegate3.swift")
            }

            @Step {
                Go to ViewController, import the SDK and create a viewDidAppear function.
                
                @Code(name: "ViewController.swift", file: "TutorialCodeViewController1.swift")
            }

            @Step {
                Create a Task block, and inside of it call `Point.requestAuthorizationIfPossible()`. Try running your app now.
                
                In the first time this runs in your app, it will trigger an iOS prompt asking the user if they authorize your app to collect data. The authorizations requested will match the types you sent when setting up the SDK. Later, when the user has already provided or denied these permissions, no prompt will be displayed.
                
                @Code(name: "ViewController.swift", file: "TutorialCodeViewController2.swift") {
                    @Image(source: "RequestingPermission", alt: "App shows the request permissions prompt.")
                }
            }

            @Step {
                Now, call `Point.setUserToken(accessToken:)` passing a development user token. If you don't have one already, check [here](https://www.areyouonpoint.co/docs/authenticating-users#getting-an-access-token-for-a-specific-user) how to obtain one.
                
                Each time you set a token, the SDK will trigger a process that collects four months worth of data from Health. This is important for us to generate more accurate metrics for your user and to provide them as soon as they start using your app. When finished, the SDK will start collecting older data, up until one year ago. You can disable this second sync by calling `Point.setUserToken(accessToken:, shouldSyncHistorialData: false)` instead.
                
                @Code(name: "ViewController.swift", file: "TutorialCodeViewController3.swift")
            }

            @Step {
                Run your app again and check XCode logs. Now you should see the past data collection running and uploading any Health data that you may have stored in the device. (You will only see this if you enabled verbose mode)
                
                To add samples to your device, open the Health app, go to the Browse tab, and select a sample to add. Remember to add a sample type that you have set up the SDK with and given permission, otherwise you won't be able to collect it. For now, we suggest running this app in a simulator so you can add or remove data as you wish, but for a more realistic experience you can run in an iPhone linked to a wearable like Apple Watch.
                
                @Image(source: "HistoricalData", alt: "Logs shows debug prints indicating that past data is being collected.")
            }
        }
    }
}
